import pandas as pd
from datetime import datetime
import streamlit as st
from PIL import Image
import plotly.express as px
import numpy as np

st.session_state['current_page'] = "Home"

st.logo(
    "src/img/unifesp_icon.ico",
    link="https://portal.unifesp.br/",
    icon_image="src/img/unifesp_icon.ico",
)

def bisseccao(f, ini, fim):
        if f(ini) * f(fim) >= 0:
            raise ValueError("N√£o h√° raiz no intervalo [a, b].")

        pontos = []
        while abs(fim - ini) > 1e-9:
            meio = (ini + fim) / 2.0
            pontos.append(meio)

            if f(ini) * f(meio) < 0:
                fim = meio
            else:
                ini = meio

        return meio, np.array(pontos)

    # Fun√ß√£o para gerar o gr√°fico
def plotar_bisseccao(f, ini, fim, raiz, pontos, xmin, xmax, n):
    x = np.linspace(xmin, xmax, n)
    y = f(x)

    fig = px.line(x=x, y=y, title='',
                    labels={'x': 'x', 'y': 'f(x)'},
                    template='plotly_dark')

        # Adiciona os pontos intermedi√°rios do m√©todo
    fig.add_scatter(x=pontos, y=[f(p) for p in pontos],
                        mode='markers+lines', marker=dict(color='cyan', size=8),
                        line=dict(color='gray', dash='dot'), name='Passos da Bissec√ß√£o')

        # Adiciona o ponto final da raiz
    fig.add_scatter(x=[raiz], y=[0], mode='markers',
                        marker=dict(color='red', size=12), name=f'Raiz Final: {raiz:.9f}')

        # Adiciona as linhas verticais delimitando o intervalo inicial
    fig.add_vline(x=ini, line_dash="dash", line_color="green", annotation_text="In√≠cio (a)")
    fig.add_vline(x=fim, line_dash="dash", line_color="green", annotation_text="Fim (b)")

    return fig







# Verificar se a chave da p√°gina "Bisse√ß√£o" foi marcada na sess√£o
if "Bissecao" in  st.session_state and st.session_state["Bissecao"]:
    def read_file():
        with open('resumos/[ 1 ] Bisse√ß√£o.md', 'r', encoding="utf-8") as file:
            data = file.read()
        st.markdown(data)  # Exibe com formata√ß√£o correta

    read_file()

    
    f = lambda x: x**2 - 2

    # Executando o m√©todo da bisse√ß√£o
    raiz, pontos = bisseccao(f, 1.0, 2.0)
    # Gerando o gr√°fico
    fig = plotar_bisseccao(f, 1.0, 2.0, raiz, pontos, 0.0, 3.0, 1000)

    # Exibindo no Streamlit
    st.title(f"Visualiza√ß√£o do M√©todo da Bisse√ß√£o:  ")
    st.plotly_chart(fig, use_container_width=True)
    

    if st.button("Voltar"):
        st.session_state["Bissecao"] = False
        st.empty()
        st.rerun()

elif "Newton" in  st.session_state and st.session_state["Newton"]:
    def read_file():
        with open('resumos/[ 1 ] Heron Newton.md', 'r', encoding="utf-8") as file:
            data = file.read()
        st.write(data)

    read_file()

    if st.button("Voltar"):
        st.session_state["Bissecao"] = False
        st.empty()
        st.rerun()
elif "Secante" in  st.session_state and st.session_state["Secante"]:
    def read_file():
        with open('resumos/[ 1 ] M√©todo das Secantes.md', 'r', encoding="utf-8") as file:
            data = file.read()
        st.write(data)

    read_file()

    if st.button("Voltar"):
        st.session_state["Secante"] = False
        st.empty()
        st.rerun()
elif "sistemas_lineares" in  st.session_state and st.session_state["sistemas_lineares"]:
    def read_file():
        with open('resumos/[ 2 ] Jacobi e Gauss-Seidel.md', 'r', encoding="utf-8") as file:
            data = file.read()
        st.write(data)

    read_file()

    if st.button("Voltar"):
        st.session_state["sistemas_lineares"] = False
        st.empty()
        st.rerun()

    
elif "interpol" in  st.session_state and st.session_state["interpol"] :
    def read_file():
        with open('resumos/[ 4 ] Interpola√ß√£o.md', 'r', encoding="utf-8") as file:
            data = file.read()
        st.write(data)

    read_file()

    if st.button("Voltar"):
        st.session_state["interpol"] = False
        st.empty()
        st.rerun()
elif "integra" in  st.session_state and st.session_state["integra"] :
    def read_file():
        with open('resumos/[ 7 ] Integra√ß√£o.md', 'r', encoding="utf-8") as file:
            data = file.read()
        st.write(data)

    read_file()

    if st.button("Voltar"):
        st.session_state["integra"] = False
        st.empty()
        st.rerun()
elif "edo1" in  st.session_state and st.session_state["edo1"] :
    def read_file():
        with open('resumos/[ 8 ] M√©todo de Euler.md', 'r', encoding="utf-8") as file:
            data = file.read()
        st.write(data)

    read_file()

    if st.button("Voltar"):
        st.session_state["edo1"] = False
        st.empty()
        st.rerun()
elif "edo2" in  st.session_state and st.session_state["edo2"] :
    def read_file():
        with open('resumos/[ 8 ] Runge Kutta.md', 'r', encoding="utf-8") as file:
            data = file.read()
        st.write(data)

    read_file()

    if st.button("Voltar"):
        st.session_state["edo1"] = False
        st.empty()
        st.rerun()
else:
    st.title("Num√©ricos An√¥nimos")
    # Exibir os bot√µes se a p√°gina "Bisse√ß√£o" n√£o foi escolhida
    col1, col2 = st.columns(2, gap='small')

    with col1:
        with st.container(border=True):
            st.button("üî¢ **Equa√ß√µes de Uma Vari√°vel**", key="polinomio")
            st.caption("Aproxima√ß√£o de polin√¥mios")
        with st.container(border=True):
            st.button("üìê **Sistemas Lineares**", key="lineares")
            st.caption("Resolu√ß√£o Sistemas Lineares com Matrizes")
        with st.container(border=True):
            st.button("üìä **Interpola√ß√£o**", key="interpolacao")
            st.caption("Interpola√ß√£o")

    with col2:
        with st.container(border=True):
            st.button("üìâ **Problemas de Valor Inicial**", key="derivacao")
            st.caption("Valor Inicial, EDOS")
        with st.container(border=True):
            st.button("üìà **Integra√ß√£o**", key="integracao")
            st.caption("Integra√ß√£o Num√©rica")

    st.markdown("---")

    st.header("Descri√ß√£o do Projeto: ")

    st.write("""
    O projeto **Num√©rico An√¥nimos** foi desenvolvido com o objetivo de consolidar os conceitos adquiridos durante o semestre de C√°lculo Num√©rico, ao mesmo tempo em que oferece uma ferramenta pr√°tica para a aplica√ß√£o dos m√©todos matem√°ticos aprendidos. Este projeto visa ser uma contribui√ß√£o √∫til e acess√≠vel para estudantes e profissionais que desejam entender e aplicar os m√©todos do C√°lculo Num√©rico de forma simples e interativa.

    ### Objetivos

    - Criar uma ferramenta intuitiva e pr√°tica para resolver problemas de C√°lculo Num√©rico.
    - Aplicar m√©todos fundamentais como **sistemas lineares**, **aproxima√ß√£o de ra√≠zes polinomiais**, **integra√ß√£o** e **deriva√ß√£o**.
    - Fornecer uma solu√ß√£o acess√≠vel, especialmente para quem est√° aprendendo C√°lculo Num√©rico.

    ### Tecnologias Utilizadas

    - **Python**: Linguagem principal para o desenvolvimento da aplica√ß√£o.
    - **Bibliotecas Python**: Uso de bibliotecas como `Numpy`, `Pandas` e `plotly.express` para implementa√ß√£o dos m√©todos matem√°ticos e visualiza√ß√£o dos resultados.
    - **Streamlit**: Framework utilizado para criar o site interativo.

    ### Funcionalidades

    - **M√©todos Matem√°ticos**: A aplica√ß√£o oferece a implementa√ß√£o dos principais m√©todos de C√°lculo Num√©rico, incluindo:
    
    - **Interface Interativa**: Utiliza√ß√£o de uma interface simples e clara para facilitar a intera√ß√£o do usu√°rio com a ferramenta.

    ### Contribui√ß√µes e Impacto

    O projeto n√£o apenas serviu para consolidar os conhecimentos adquiridos ao longo do semestre, mas tamb√©m prop√µe uma ferramenta √∫til para qualquer pessoa que esteja interessada em aprender e aplicar os conceitos de C√°lculo Num√©rico. A combina√ß√£o de uma interface amig√°vel com a funcionalidade do chatbot torna a experi√™ncia de aprendizado mais din√¢mica e interativa.

    O **Num√©rico An√¥nimos** representa uma forma pr√°tica e acess√≠vel de aplicar m√©todos matem√°ticos fundamentais, promovendo o entendimento e o uso desses conceitos em problemas reais e desafiadores.
    """)

    st.markdown("---")
    st.header("M√©todos Utilizados")

    st.markdown("<small>M√©todos para aproximar raizes de polin√¥mios:</small>", unsafe_allow_html=True)
    if st.button("**M√©todo da Bisse√ß√£o**", use_container_width=True):
        st.session_state["Bissecao"] = True  # Atualiza o estado para marcar a p√°gina como clicada
        st.rerun()  # Garante que a p√°gina seja recarregada com a nova p√°gina

    if st.button("**M√©todo de Newton**", use_container_width=True):
        st.session_state["Newton"] = True  # Atualiza o estado para marcar a p√°gina como clicada
        st.rerun()  # Garante que a p√°gina seja recarregada com a nova p√°gina

    if st.button("**M√©todo da Secante**", use_container_width=True):

        st.session_state["Secante"] = True  # Atualiza o estado para marcar a p√°gina como clicada
        st.rerun()  # Garante que a p√°gina seja recarregada com a nova p√°gina

    st.markdown("<small>M√©todos para resolver sistemas lineares:</small>", unsafe_allow_html=True)
    if st.button("**Sistemas Lineares**", use_container_width=True):
        st.session_state["sistemas_lineares"] = True  # Atualiza o estado para marcar a p√°gina como clicada
        st.rerun()  # Garante que a p√°gina seja recarregada com a nova p√°gina

    st.markdown("<small>M√©todos de interpola√ß√£o:</small>", unsafe_allow_html=True)
    if st.button("**Interpola√ß√£o**", use_container_width=True):
        st.session_state["interpol"] = True  # Atualiza o estado para marcar a p√°gina como clicada
        st.rerun()  # Garante que a p√°gina seja recarregada com a nova p√°gina

    if st.button("**Integra√ß√£o**", use_container_width=True):
        st.session_state["integra"] = True  # Atualiza o estado para marcar a p√°gina como clicada
        st.rerun()  # Garante que a p√°gina seja recarregada com a nova p√°gina

    if st.button("**M√©todo de Euler**", use_container_width=True):
        st.session_state["edo1"] = True  # Atualiza o estado para marcar a p√°gina como clicada
        st.rerun()  # Garante que a p√°gina seja recarregada com a nova p√°gina

    if st.button("**Runge Kutta**", use_container_width=True):
        st.session_state["edo2"] = True  # Atualiza o estado para marcar a p√°gina como clicada
        st.rerun()  # Garante que a p√°gina seja recarregada com a nova p√°gina